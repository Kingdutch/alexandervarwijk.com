user web;
worker_processes 1;
pid /run/nginx.pid;

events {
  worker_connections 20000;
}

http {
  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  keepalive_timeout 65;
  types_hash_max_size 2048;
  server_tokens off;

  include /etc/nginx/mime.types;
  types {
    application/vnd.apple.pkpass pkpass;
    font/ttf ttf;
    font/otf otf;
  }
  default_type application/octet-stream;

  access_log /var/log/nginx/access.log combined;
  error_log /var/log/nginx/error.log;

  # Set $remote_addr from our X-Client-IP header.
  real_ip_header X-Client-IP;
  set_real_ip_from 0.0.0.0/0;

  # Force nginx to only generate relative redirects.
  absolute_redirect off;

  # Disable buffering of the *request* (\o/ thanks nginx 1.7.1).
  proxy_request_buffering off;
  fastcgi_request_buffering off;
  # Do not limit the body size.
  client_max_body_size 0;
  client_body_buffer_size 128k;

  # Disable buffering of the *response* too.
  proxy_buffering off;
  fastcgi_buffering off;
  # Increase the size of the initial buffer, used to read the response header.
  proxy_buffer_size 32k;
  fastcgi_buffer_size 32k;
  proxy_buffers 128 4k;
  fastcgi_buffers 128 4k;
  proxy_busy_buffers_size 32k;
  fastcgi_busy_buffers_size 32k;
  # Disable on-disk buffering.
  proxy_max_temp_file_size 0;
  fastcgi_max_temp_file_size 0;

  # Timeouts.
  # We timeout after 30s if the application cannot start processing the request...
  proxy_connect_timeout     30s;
  fastcgi_connect_timeout   30s;
  # ... but once the application started processing, we essentially never timeout.
  proxy_read_timeout        86400s;
  fastcgi_read_timeout      86400s;
  proxy_send_timeout        86400s;
  fastcgi_send_timeout      86400s;

  # Ignore all special upstream headers.
  proxy_ignore_headers X-Accel-Redirect X-Accel-Expires X-Accel-Limit-Rate
    X-Accel-Buffering X-Accel-Charset Expires Cache-Control Set-Cookie Vary;
  fastcgi_ignore_headers X-Accel-Redirect X-Accel-Expires X-Accel-Limit-Rate
    X-Accel-Buffering X-Accel-Charset Expires Cache-Control Set-Cookie Vary;

  client_body_temp_path /tmp/client_temp;
  proxy_temp_path /tmp/proxy_temp;
  fastcgi_temp_path /tmp/fastcgi_temp;
  uwsgi_temp_path /tmp/uwsgi_temp;
  scgi_temp_path /tmp/scgi_temp;

  map $http_x_client_ssl $drupal_server_port {
    "on"      443;
    default   80;
  }

  # If the request has a Upgrade header, set Connection to "upgrade",
  # else force it as "Connection: close" to force the upstream to close the
  # connection.
  map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
  }

  include /etc/nginx/conf.d/*.conf;
}
